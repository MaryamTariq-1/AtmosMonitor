{"ast":null,"code":"import axios from 'axios';\n\n// Create Axios instance with a dynamic base URL\nconst axiosInstance = axios.create({\n  baseURL: process.env.REACT_APP_API_BASE_URL || 'http://localhost:3001/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request Interceptor: Attach Authorization Token\naxiosInstance.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response Interceptor: Handle Unauthorized Errors (401)\naxiosInstance.interceptors.response.use(response => response, error => {\n  if (error.response && error.response.status === 401) {\n    // Clear stored token and redirect to Sign In page if token is expired/invalid\n    localStorage.removeItem('token');\n    window.location.href = '/signin';\n  }\n  return Promise.reject(error);\n});\nexport default axiosInstance;","map":{"version":3,"names":["axios","axiosInstance","create","baseURL","process","env","REACT_APP_API_BASE_URL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","response","status","removeItem","window","location","href"],"sources":["/Users/Rayyan./Desktop/FYP/AtmosMonitor/frontend/src/utils/axios.js"],"sourcesContent":["import axios from 'axios';\n\n// Create Axios instance with a dynamic base URL\nconst axiosInstance = axios.create({\n  baseURL: process.env.REACT_APP_API_BASE_URL || 'http://localhost:3001/api', \n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request Interceptor: Attach Authorization Token\naxiosInstance.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`; \n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response Interceptor: Handle Unauthorized Errors (401)\naxiosInstance.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response && error.response.status === 401) {\n      // Clear stored token and redirect to Sign In page if token is expired/invalid\n      localStorage.removeItem('token');\n      window.location.href = '/signin';\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport default axiosInstance;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,aAAa,GAAGD,KAAK,CAACE,MAAM,CAAC;EACjCC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,sBAAsB,IAAI,2BAA2B;EAC1EC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAN,aAAa,CAACO,YAAY,CAACC,OAAO,CAACC,GAAG,CACnCC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,KAAK,EAAE;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,EACAI,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAd,aAAa,CAACO,YAAY,CAACU,QAAQ,CAACR,GAAG,CACpCQ,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EACT,IAAIA,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IACnD;IACAN,YAAY,CAACO,UAAU,CAAC,OAAO,CAAC;IAChCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,SAAS;EAClC;EACA,OAAOP,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAed,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}