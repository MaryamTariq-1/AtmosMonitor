{"ast":null,"code":"var _jsxFileName = \"/Users/Rayyan./Desktop/FYP/AtmosMonitor/frontend/src/pages/Subscription/Checkout.js\",\n  _s = $RefreshSig$();\n// // // import React, { useState } from \"react\";\n// // // import { useNavigate } from \"react-router-dom\";\n// // // import \"./Checkout.css\";\n\n// // // const Checkout = () => {\n// // //   const navigate = useNavigate();\n\n// // //   const [selectedPaymentMethod, setSelectedPaymentMethod] = useState(\"\");\n// // //   const [paymentDetails, setPaymentDetails] = useState({\n// // //     cardNumber: \"\",\n// // //     expiryDate: \"\",\n// // //     cvv: \"\",\n// // //   });\n\n// // //   const handlePaymentMethodChange = (e) => {\n// // //     setSelectedPaymentMethod(e.target.value);\n// // //   };\n\n// // //   const handlePaymentDetailsChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setPaymentDetails((prevDetails) => ({\n// // //       ...prevDetails,\n// // //       [name]: value,\n// // //     }));\n// // //   };\n\n// // //   const handleSubmit = (e) => {\n// // //     e.preventDefault();\n// // //     // Payment logic goes here, for now we will just navigate to a success page\n// // //     alert(\"Payment successful!\");\n// // //     navigate(\"/payment-success\");\n// // //   };\n\n// // //   return (\n// // //     <div className=\"checkout-container\">\n// // //       <h2>Checkout</h2>\n// // //       <form onSubmit={handleSubmit} className=\"checkout-form\">\n// // //         <div className=\"payment-method\">\n// // //           <label>\n// // //             <input\n// // //               type=\"radio\"\n// // //               value=\"Credit Card\"\n// // //               checked={selectedPaymentMethod === \"Credit Card\"}\n// // //               onChange={handlePaymentMethodChange}\n// // //             />\n// // //             Credit Card\n// // //           </label>\n// // //           <label>\n// // //             <input\n// // //               type=\"radio\"\n// // //               value=\"PayPal\"\n// // //               checked={selectedPaymentMethod === \"PayPal\"}\n// // //               onChange={handlePaymentMethodChange}\n// // //             />\n// // //             PayPal\n// // //           </label>\n// // //           <label>\n// // //             <input\n// // //               type=\"radio\"\n// // //               value=\"Google Pay\"\n// // //               checked={selectedPaymentMethod === \"Google Pay\"}\n// // //               onChange={handlePaymentMethodChange}\n// // //             />\n// // //             Google Pay\n// // //           </label>\n// // //         </div>\n\n// // //         {selectedPaymentMethod === \"Credit Card\" && (\n// // //           <div className=\"credit-card-details\">\n// // //             <div className=\"input-group\">\n// // //               <label htmlFor=\"cardNumber\">Card Number:</label>\n// // //               <input\n// // //                 type=\"text\"\n// // //                 name=\"cardNumber\"\n// // //                 value={paymentDetails.cardNumber}\n// // //                 onChange={handlePaymentDetailsChange}\n// // //                 required\n// // //                 placeholder=\"Enter your card number\"\n// // //               />\n// // //             </div>\n// // //             <div className=\"input-group\">\n// // //               <label htmlFor=\"expiryDate\">Expiry Date:</label>\n// // //               <input\n// // //                 type=\"text\"\n// // //                 name=\"expiryDate\"\n// // //                 value={paymentDetails.expiryDate}\n// // //                 onChange={handlePaymentDetailsChange}\n// // //                 required\n// // //                 placeholder=\"MM/YY\"\n// // //               />\n// // //             </div>\n// // //             <div className=\"input-group\">\n// // //               <label htmlFor=\"cvv\">CVV:</label>\n// // //               <input\n// // //                 type=\"text\"\n// // //                 name=\"cvv\"\n// // //                 value={paymentDetails.cvv}\n// // //                 onChange={handlePaymentDetailsChange}\n// // //                 required\n// // //                 placeholder=\"CVV\"\n// // //               />\n// // //             </div>\n// // //           </div>\n// // //         )}\n\n// // //         <div className=\"submit-button\">\n// // //           <button type=\"submit\">Pay Now</button>\n// // //         </div>\n// // //       </form>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default Checkout;\n\n// // import React, { useState } from \"react\";\n// // import { useNavigate } from \"react-router-dom\";\n// // import {\n// //   Elements,\n// //   useStripe,\n// //   useElements,\n// //   CardElement,\n// // } from \"@stripe/react-stripe-js\";\n// // import { loadStripe } from \"@stripe/stripe-js\";\n// // import \"./Checkout.css\";\n\n// // // Make sure to replace this with your own public key from Stripe\n// // const stripePromise = loadStripe(\n// //   \"pk_test_51NdsQCEBmpPY3F1SVvoq27xazI7MPxe38i9q9otPfxTR61SRhYaUZHvDjxnvWl8VuriA1QFiQVkqKGitEzYcR2Ha00yiiOOlzY\"\n// // );\n\n// // const Checkout = () => {\n// //   const navigate = useNavigate();\n// //   const stripe = useStripe();\n// //   const elements = useElements();\n\n// //   const [selectedPaymentMethod, setSelectedPaymentMethod] = useState(\"\");\n// //   const [paymentDetails, setPaymentDetails] = useState({\n// //     cardNumber: \"\",\n// //     expiryDate: \"\",\n// //     cvv: \"\",\n// //   });\n\n// //   const handlePaymentMethodChange = (e) => {\n// //     setSelectedPaymentMethod(e.target.value);\n// //   };\n\n// //   const handlePaymentDetailsChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setPaymentDetails((prevDetails) => ({\n// //       ...prevDetails,\n// //       [name]: value,\n// //     }));\n// //   };\n\n// //     const handleSubmit = async (e) => {\n// //       e.preventDefault();\n\n// //       if (!stripe || !elements) {\n// //         return;\n// //       }\n\n// //       // For a credit card payment\n// //       if (selectedPaymentMethod === \"Credit Card\") {\n// //         const cardElement = elements.getElement(CardElement);\n// //         const { token, error } = await stripe.createToken(cardElement);\n\n// //         if (error) {\n// //           console.error(\"Payment error:\", error);\n// //           alert(\"Payment failed: \" + error.message);\n// //         } else {\n// //           console.log(\"Received Stripe token:\", token);\n// //           try {\n// //             const response = await fetch(\n// //               \"http://localhost:3001/api/payment-intent\",\n// //               {\n// //                 method: \"POST\",\n// //                 headers: {\n// //                   \"Content-Type\": \"application/json\",\n// //                 },\n// //                 body: JSON.stringify({ token: token.id }),\n// //               }\n// //             );\n\n// //             const result = await response.json();\n\n// //             if (response.ok) {\n// //               alert(\"Payment successful!\");\n// //               navigate(\"/payment-success\");\n// //             } else {\n// //               console.error(\"Payment error:\", result.error);\n// //               alert(\"Payment failed: \" + result.error);\n// //             }\n// //           } catch (err) {\n// //             console.error(\"Error processing payment:\", err);\n// //             alert(\"Payment failed.\");\n// //           }\n// //         }\n// //       }\n// //     };\n\n// // //   const handleSubmit = async (e) => {\n// // //     e.preventDefault();\n\n// // //     if (!stripe || !elements) {\n// // //       return;\n// // //     }\n\n// // //     // For a credit card payment\n// // //     if (selectedPaymentMethod === \"Credit Card\") {\n// // //       const cardElement = elements.getElement(CardElement);\n// // //       const { token, error } = await stripe.createToken(cardElement);\n\n// // //       if (error) {\n// // //         console.error(\"Payment error:\", error);\n// // //         alert(\"Payment failed: \" + error.message);\n// // //       } else {\n// // //         // Send the token to your server to handle the payment\n// // //         console.log(\"Received Stripe token:\", token);\n// // //         // Example API call:\n// // //         const response = await fetch(\"/api/payment-intent\", {\n// // //           method: \"POST\",\n// // //           body: JSON.stringify({ token: token.id }),\n// // //         });\n// // //         const result = await response.json();\n\n// // //         alert(\"Payment successful!\");\n// // //         navigate(\"/payment-success\");\n// // //       }\n// // //     } else {\n// // //       // Handle other payment methods like PayPal, Google Pay, etc.\n// // //       alert(\"Other payment methods are not integrated yet.\");\n// // //     }\n// // //   };\n\n// //   return (\n// //     <div className=\"checkout-container\">\n// //       <h2>Checkout</h2>\n// //       <form onSubmit={handleSubmit} className=\"checkout-form\">\n// //         <div className=\"payment-method\">\n// //           <label>\n// //             <input\n// //               type=\"radio\"\n// //               value=\"Credit Card\"\n// //               checked={selectedPaymentMethod === \"Credit Card\"}\n// //               onChange={handlePaymentMethodChange}\n// //             />\n// //             Credit Card\n// //           </label>\n// //           <label>\n// //             <input\n// //               type=\"radio\"\n// //               value=\"PayPal\"\n// //               checked={selectedPaymentMethod === \"PayPal\"}\n// //               onChange={handlePaymentMethodChange}\n// //             />\n// //             PayPal\n// //           </label>\n// //           <label>\n// //             <input\n// //               type=\"radio\"\n// //               value=\"Google Pay\"\n// //               checked={selectedPaymentMethod === \"Google Pay\"}\n// //               onChange={handlePaymentMethodChange}\n// //             />\n// //             Google Pay\n// //           </label>\n// //         </div>\n\n// //         {selectedPaymentMethod === \"Credit Card\" && (\n// //           <div className=\"credit-card-details\">\n// //             <div className=\"input-group\">\n// //               <label>Card Details:</label>\n// //               <CardElement />\n// //             </div>\n// //           </div>\n// //         )}\n\n// //         <div className=\"submit-button\">\n// //           <button type=\"submit\" disabled={!stripe}>\n// //             Pay Now\n// //           </button>\n// //         </div>\n// //       </form>\n// //     </div>\n// //   );\n// // };\n\n// // const CheckoutWrapper = () => (\n// //   <Elements stripe={stripePromise}>\n// //     <Checkout />\n// //   </Elements>\n// // );\n\n// // export default CheckoutWrapper;\n\n// import React, { useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import {\n//   Elements,\n//   useStripe,\n//   useElements,\n//   CardElement,\n// } from \"@stripe/react-stripe-js\";\n// import { loadStripe } from \"@stripe/stripe-js\";\n// import \"./Checkout.css\";\n\n// // Initialize Stripe with your public key (use your actual public key here)\n// const stripePromise = loadStripe(\n//   \"pk_test_51NdsQCEBmpPY3F1SVvoq27xazI7MPxe38i9q9otPfxTR61SRhYaUZHvDjxnvWl8VuriA1QFiQVkqKGitEzYcR2Ha00yiiOOlzY\"\n// );\n\n// const Checkout = () => {\n//   const navigate = useNavigate();\n//   const stripe = useStripe();\n//   const elements = useElements();\n\n//   const [selectedPaymentMethod, setSelectedPaymentMethod] =\n//     useState(\"Credit Card\");\n\n//   const handlePaymentMethodChange = (e) => {\n//     setSelectedPaymentMethod(e.target.value);\n//   };\n\n// //   const handleSubmit = async (e) => {\n// //     e.preventDefault();\n\n// //     if (!stripe || !elements) {\n// //       return;\n// //     }\n\n// //     // For a credit card payment\n// //     if (selectedPaymentMethod === \"Credit Card\") {\n// //       const cardElement = elements.getElement(CardElement);\n// //       const { token, error } = await stripe.createToken(cardElement);\n\n// //       if (error) {\n// //         console.error(\"Payment error:\", error);\n// //         alert(\"Payment failed: \" + error.message);\n// //       } else {\n// //         console.log(\"Received Stripe token:\", token);\n// //         try {\n// //           const response = await fetch(\n// //             \"http://localhost:3001/api/payment-intent\",\n// //             {\n// //               method: \"POST\",\n// //               headers: {\n// //                 \"Content-Type\": \"application/json\",\n// //               },\n// //               body: JSON.stringify({ token: token.id }),\n// //             }\n// //           );\n\n// //           const result = await response.json();\n\n// //           if (response.ok) {\n// //             alert(\"Payment successful!\");\n// //             navigate(\"/payment-success\");\n// //           } else {\n// //             console.error(\"Payment error:\", result.error);\n// //             alert(\"Payment failed: \" + result.error);\n// //           }\n// //         } catch (err) {\n// //           console.error(\"Error processing payment:\", err);\n// //           alert(\"Payment failed.\");\n// //         }\n// //       }\n// //     }\n// //   };\n\n//     const handleSubmit = async (e) => {\n//       e.preventDefault();\n\n//       if (!stripe || !elements) {\n//         return;\n//       }\n\n//       // For a credit card payment\n//       if (selectedPaymentMethod === \"Credit Card\") {\n//         const cardElement = elements.getElement(CardElement);\n//         const { token, error } = await stripe.createToken(cardElement);\n\n//         if (error) {\n//           console.error(\"Payment error:\", error);\n//           alert(\"Payment failed: \" + error.message);\n//         } else {\n//           console.log(\"Received Stripe token:\", token);\n//           try {\n//             const response = await fetch(\n//               \"http://localhost:3001/api/payment-intent\",\n//               {\n//                 method: \"POST\",\n//                 headers: {\n//                   \"Content-Type\": \"application/json\",\n//                 },\n//                 body: JSON.stringify({ token: token.id }), // Sending the token ID\n//               }\n//             );\n\n//             const result = await response.json();\n\n//             if (response.ok) {\n//               alert(\"Payment successful!\");\n//               navigate(\"/payment-success\");\n//             } else {\n//               console.error(\"Payment error:\", result.error);\n//               alert(\"Payment failed: \" + result.error);\n//             }\n//           } catch (err) {\n//             console.error(\"Error processing payment:\", err);\n//             alert(\"Payment failed.\");\n//           }\n//         }\n//       }\n//     };\n\n//   return (\n//     <div className=\"checkout-container\">\n//       <h2>Checkout</h2>\n//       <form onSubmit={handleSubmit} className=\"checkout-form\">\n//         <div className=\"payment-method\">\n//           <label>\n//             <input\n//               type=\"radio\"\n//               value=\"Credit Card\"\n//               checked={selectedPaymentMethod === \"Credit Card\"}\n//               onChange={handlePaymentMethodChange}\n//             />\n//             Credit Card\n//           </label>\n//         </div>\n\n//         {selectedPaymentMethod === \"Credit Card\" && (\n//           <div className=\"credit-card-details\">\n//             <div className=\"input-group\">\n//               <label>Cardholder Name:</label>\n//               <input\n//                 type=\"text\"\n//                 value={cardholderName}\n//                 onChange={(e) => setCardholderName(e.target.value)}\n//                 required\n//                 placeholder=\"Enter cardholder's name\"\n//               />\n//             </div>\n\n//             <div className=\"input-group\">\n//               <label>Email:</label>\n//               <input\n//                 type=\"email\"\n//                 value={email}\n//                 onChange={(e) => setEmail(e.target.value)}\n//                 required\n//                 placeholder=\"Enter your email\"\n//               />\n//             </div>\n\n//             <div className=\"input-group\">\n//               <label>Card Details:</label>\n//               <CardElement />\n//             </div>\n//           </div>\n//         )}\n\n//         <div className=\"submit-button\">\n//           <button type=\"submit\" disabled={!stripe}>\n//             Pay Now\n//           </button>\n//         </div>\n//       </form>\n//     </div>\n//   );\n// };\n\n// const CheckoutWrapper = () => (\n//   <Elements stripe={stripePromise}>\n//     <Checkout />\n//   </Elements>\n// );\n\n// export default CheckoutWrapper;\n\nimport React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Elements, useStripe, useElements, CardElement } from \"@stripe/react-stripe-js\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport \"./Checkout.css\";\n\n// Initialize Stripe with your public key\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst stripePromise = loadStripe(\"pk_test_51NdsQCEBmpPY3F1SVvoq27xazI7MPxe38i9q9otPfxTR61SRhYaUZHvDjxnvWl8VuriA1QFiQVkqKGitEzYcR2Ha00yiiOOlzY\");\nconst Checkout = () => {\n  _s();\n  const navigate = useNavigate();\n  const stripe = useStripe();\n  const elements = useElements();\n  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState(\"Credit Card\");\n  const [cardholderName, setCardholderName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const handlePaymentMethodChange = e => {\n    setSelectedPaymentMethod(e.target.value);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!stripe || !elements) {\n      return;\n    }\n\n    // For a credit card payment\n    if (selectedPaymentMethod === \"Credit Card\") {\n      const cardElement = elements.getElement(CardElement);\n      const {\n        token,\n        error\n      } = await stripe.createToken(cardElement);\n      if (error) {\n        console.error(\"Payment error:\", error);\n        alert(\"Payment failed: \" + error.message);\n      } else {\n        console.log(\"Received Stripe token:\", token);\n        try {\n          const response = await fetch(\"http://localhost:3001/api/payment-intent\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              token: token.id,\n              cardholderName,\n              email\n            })\n          });\n          const result = await response.json();\n          if (response.ok) {\n            alert(\"Payment successful!\");\n            navigate(\"/payment-success\");\n          } else {\n            console.error(\"Payment error:\", result.error);\n            alert(\"Payment failed: \" + result.error);\n          }\n        } catch (err) {\n          console.error(\"Error processing payment:\", err);\n          alert(\"Payment failed.\");\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"checkout-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Checkout\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 571,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"checkout-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"payment-method\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            value: \"Credit Card\",\n            checked: selectedPaymentMethod === \"Credit Card\",\n            onChange: handlePaymentMethodChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 575,\n            columnNumber: 13\n          }, this), \"Credit Card\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 574,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 573,\n        columnNumber: 9\n      }, this), selectedPaymentMethod === \"Credit Card\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"credit-card-details\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Cardholder Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 588,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: cardholderName,\n            onChange: e => setCardholderName(e.target.value),\n            required: true,\n            placeholder: \"Enter cardholder's name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 589,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 587,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Email:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 599,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            value: email,\n            onChange: e => setEmail(e.target.value),\n            required: true,\n            placeholder: \"Enter your email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 600,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 598,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Card Details:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 610,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CardElement, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 611,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 609,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 586,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"submit-button\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: !stripe,\n          children: \"Pay Now\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 617,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 616,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 572,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 570,\n    columnNumber: 5\n  }, this);\n};\n_s(Checkout, \"hZQhur39kEuW8Kil6MsetXad3d4=\", false, function () {\n  return [useNavigate, useStripe, useElements];\n});\n_c = Checkout;\nconst CheckoutWrapper = () => /*#__PURE__*/_jsxDEV(Elements, {\n  stripe: stripePromise,\n  children: /*#__PURE__*/_jsxDEV(Checkout, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 628,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 627,\n  columnNumber: 3\n}, this);\n_c2 = CheckoutWrapper;\nexport default CheckoutWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"Checkout\");\n$RefreshReg$(_c2, \"CheckoutWrapper\");","map":{"version":3,"names":["React","useState","useNavigate","Elements","useStripe","useElements","CardElement","loadStripe","jsxDEV","_jsxDEV","stripePromise","Checkout","_s","navigate","stripe","elements","selectedPaymentMethod","setSelectedPaymentMethod","cardholderName","setCardholderName","email","setEmail","handlePaymentMethodChange","e","target","value","handleSubmit","preventDefault","cardElement","getElement","token","error","createToken","console","alert","message","log","response","fetch","method","headers","body","JSON","stringify","id","result","json","ok","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","checked","onChange","required","placeholder","disabled","_c","CheckoutWrapper","_c2","$RefreshReg$"],"sources":["/Users/Rayyan./Desktop/FYP/AtmosMonitor/frontend/src/pages/Subscription/Checkout.js"],"sourcesContent":["// // // import React, { useState } from \"react\";\n// // // import { useNavigate } from \"react-router-dom\";\n// // // import \"./Checkout.css\";\n\n// // // const Checkout = () => {\n// // //   const navigate = useNavigate();\n\n// // //   const [selectedPaymentMethod, setSelectedPaymentMethod] = useState(\"\");\n// // //   const [paymentDetails, setPaymentDetails] = useState({\n// // //     cardNumber: \"\",\n// // //     expiryDate: \"\",\n// // //     cvv: \"\",\n// // //   });\n\n// // //   const handlePaymentMethodChange = (e) => {\n// // //     setSelectedPaymentMethod(e.target.value);\n// // //   };\n\n// // //   const handlePaymentDetailsChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setPaymentDetails((prevDetails) => ({\n// // //       ...prevDetails,\n// // //       [name]: value,\n// // //     }));\n// // //   };\n\n// // //   const handleSubmit = (e) => {\n// // //     e.preventDefault();\n// // //     // Payment logic goes here, for now we will just navigate to a success page\n// // //     alert(\"Payment successful!\");\n// // //     navigate(\"/payment-success\");\n// // //   };\n\n// // //   return (\n// // //     <div className=\"checkout-container\">\n// // //       <h2>Checkout</h2>\n// // //       <form onSubmit={handleSubmit} className=\"checkout-form\">\n// // //         <div className=\"payment-method\">\n// // //           <label>\n// // //             <input\n// // //               type=\"radio\"\n// // //               value=\"Credit Card\"\n// // //               checked={selectedPaymentMethod === \"Credit Card\"}\n// // //               onChange={handlePaymentMethodChange}\n// // //             />\n// // //             Credit Card\n// // //           </label>\n// // //           <label>\n// // //             <input\n// // //               type=\"radio\"\n// // //               value=\"PayPal\"\n// // //               checked={selectedPaymentMethod === \"PayPal\"}\n// // //               onChange={handlePaymentMethodChange}\n// // //             />\n// // //             PayPal\n// // //           </label>\n// // //           <label>\n// // //             <input\n// // //               type=\"radio\"\n// // //               value=\"Google Pay\"\n// // //               checked={selectedPaymentMethod === \"Google Pay\"}\n// // //               onChange={handlePaymentMethodChange}\n// // //             />\n// // //             Google Pay\n// // //           </label>\n// // //         </div>\n\n// // //         {selectedPaymentMethod === \"Credit Card\" && (\n// // //           <div className=\"credit-card-details\">\n// // //             <div className=\"input-group\">\n// // //               <label htmlFor=\"cardNumber\">Card Number:</label>\n// // //               <input\n// // //                 type=\"text\"\n// // //                 name=\"cardNumber\"\n// // //                 value={paymentDetails.cardNumber}\n// // //                 onChange={handlePaymentDetailsChange}\n// // //                 required\n// // //                 placeholder=\"Enter your card number\"\n// // //               />\n// // //             </div>\n// // //             <div className=\"input-group\">\n// // //               <label htmlFor=\"expiryDate\">Expiry Date:</label>\n// // //               <input\n// // //                 type=\"text\"\n// // //                 name=\"expiryDate\"\n// // //                 value={paymentDetails.expiryDate}\n// // //                 onChange={handlePaymentDetailsChange}\n// // //                 required\n// // //                 placeholder=\"MM/YY\"\n// // //               />\n// // //             </div>\n// // //             <div className=\"input-group\">\n// // //               <label htmlFor=\"cvv\">CVV:</label>\n// // //               <input\n// // //                 type=\"text\"\n// // //                 name=\"cvv\"\n// // //                 value={paymentDetails.cvv}\n// // //                 onChange={handlePaymentDetailsChange}\n// // //                 required\n// // //                 placeholder=\"CVV\"\n// // //               />\n// // //             </div>\n// // //           </div>\n// // //         )}\n\n// // //         <div className=\"submit-button\">\n// // //           <button type=\"submit\">Pay Now</button>\n// // //         </div>\n// // //       </form>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default Checkout;\n\n\n// // import React, { useState } from \"react\";\n// // import { useNavigate } from \"react-router-dom\";\n// // import {\n// //   Elements,\n// //   useStripe,\n// //   useElements,\n// //   CardElement,\n// // } from \"@stripe/react-stripe-js\";\n// // import { loadStripe } from \"@stripe/stripe-js\";\n// // import \"./Checkout.css\";\n\n// // // Make sure to replace this with your own public key from Stripe\n// // const stripePromise = loadStripe(\n// //   \"pk_test_51NdsQCEBmpPY3F1SVvoq27xazI7MPxe38i9q9otPfxTR61SRhYaUZHvDjxnvWl8VuriA1QFiQVkqKGitEzYcR2Ha00yiiOOlzY\"\n// // );\n\n// // const Checkout = () => {\n// //   const navigate = useNavigate();\n// //   const stripe = useStripe();\n// //   const elements = useElements();\n\n// //   const [selectedPaymentMethod, setSelectedPaymentMethod] = useState(\"\");\n// //   const [paymentDetails, setPaymentDetails] = useState({\n// //     cardNumber: \"\",\n// //     expiryDate: \"\",\n// //     cvv: \"\",\n// //   });\n\n// //   const handlePaymentMethodChange = (e) => {\n// //     setSelectedPaymentMethod(e.target.value);\n// //   };\n\n// //   const handlePaymentDetailsChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setPaymentDetails((prevDetails) => ({\n// //       ...prevDetails,\n// //       [name]: value,\n// //     }));\n// //   };\n\n// //     const handleSubmit = async (e) => {\n// //       e.preventDefault();\n\n// //       if (!stripe || !elements) {\n// //         return;\n// //       }\n\n// //       // For a credit card payment\n// //       if (selectedPaymentMethod === \"Credit Card\") {\n// //         const cardElement = elements.getElement(CardElement);\n// //         const { token, error } = await stripe.createToken(cardElement);\n\n// //         if (error) {\n// //           console.error(\"Payment error:\", error);\n// //           alert(\"Payment failed: \" + error.message);\n// //         } else {\n// //           console.log(\"Received Stripe token:\", token);\n// //           try {\n// //             const response = await fetch(\n// //               \"http://localhost:3001/api/payment-intent\",\n// //               {\n// //                 method: \"POST\",\n// //                 headers: {\n// //                   \"Content-Type\": \"application/json\",\n// //                 },\n// //                 body: JSON.stringify({ token: token.id }),\n// //               }\n// //             );\n\n// //             const result = await response.json();\n\n// //             if (response.ok) {\n// //               alert(\"Payment successful!\");\n// //               navigate(\"/payment-success\");\n// //             } else {\n// //               console.error(\"Payment error:\", result.error);\n// //               alert(\"Payment failed: \" + result.error);\n// //             }\n// //           } catch (err) {\n// //             console.error(\"Error processing payment:\", err);\n// //             alert(\"Payment failed.\");\n// //           }\n// //         }\n// //       }\n// //     };\n\n    \n// // //   const handleSubmit = async (e) => {\n// // //     e.preventDefault();\n\n// // //     if (!stripe || !elements) {\n// // //       return;\n// // //     }\n\n// // //     // For a credit card payment\n// // //     if (selectedPaymentMethod === \"Credit Card\") {\n// // //       const cardElement = elements.getElement(CardElement);\n// // //       const { token, error } = await stripe.createToken(cardElement);\n\n// // //       if (error) {\n// // //         console.error(\"Payment error:\", error);\n// // //         alert(\"Payment failed: \" + error.message);\n// // //       } else {\n// // //         // Send the token to your server to handle the payment\n// // //         console.log(\"Received Stripe token:\", token);\n// // //         // Example API call:\n// // //         const response = await fetch(\"/api/payment-intent\", {\n// // //           method: \"POST\",\n// // //           body: JSON.stringify({ token: token.id }),\n// // //         });\n// // //         const result = await response.json();\n\n// // //         alert(\"Payment successful!\");\n// // //         navigate(\"/payment-success\");\n// // //       }\n// // //     } else {\n// // //       // Handle other payment methods like PayPal, Google Pay, etc.\n// // //       alert(\"Other payment methods are not integrated yet.\");\n// // //     }\n// // //   };\n\n// //   return (\n// //     <div className=\"checkout-container\">\n// //       <h2>Checkout</h2>\n// //       <form onSubmit={handleSubmit} className=\"checkout-form\">\n// //         <div className=\"payment-method\">\n// //           <label>\n// //             <input\n// //               type=\"radio\"\n// //               value=\"Credit Card\"\n// //               checked={selectedPaymentMethod === \"Credit Card\"}\n// //               onChange={handlePaymentMethodChange}\n// //             />\n// //             Credit Card\n// //           </label>\n// //           <label>\n// //             <input\n// //               type=\"radio\"\n// //               value=\"PayPal\"\n// //               checked={selectedPaymentMethod === \"PayPal\"}\n// //               onChange={handlePaymentMethodChange}\n// //             />\n// //             PayPal\n// //           </label>\n// //           <label>\n// //             <input\n// //               type=\"radio\"\n// //               value=\"Google Pay\"\n// //               checked={selectedPaymentMethod === \"Google Pay\"}\n// //               onChange={handlePaymentMethodChange}\n// //             />\n// //             Google Pay\n// //           </label>\n// //         </div>\n\n// //         {selectedPaymentMethod === \"Credit Card\" && (\n// //           <div className=\"credit-card-details\">\n// //             <div className=\"input-group\">\n// //               <label>Card Details:</label>\n// //               <CardElement />\n// //             </div>\n// //           </div>\n// //         )}\n\n// //         <div className=\"submit-button\">\n// //           <button type=\"submit\" disabled={!stripe}>\n// //             Pay Now\n// //           </button>\n// //         </div>\n// //       </form>\n// //     </div>\n// //   );\n// // };\n\n// // const CheckoutWrapper = () => (\n// //   <Elements stripe={stripePromise}>\n// //     <Checkout />\n// //   </Elements>\n// // );\n\n// // export default CheckoutWrapper;\n\n\n\n// import React, { useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import {\n//   Elements,\n//   useStripe,\n//   useElements,\n//   CardElement,\n// } from \"@stripe/react-stripe-js\";\n// import { loadStripe } from \"@stripe/stripe-js\";\n// import \"./Checkout.css\";\n\n// // Initialize Stripe with your public key (use your actual public key here)\n// const stripePromise = loadStripe(\n//   \"pk_test_51NdsQCEBmpPY3F1SVvoq27xazI7MPxe38i9q9otPfxTR61SRhYaUZHvDjxnvWl8VuriA1QFiQVkqKGitEzYcR2Ha00yiiOOlzY\"\n// );\n\n// const Checkout = () => {\n//   const navigate = useNavigate();\n//   const stripe = useStripe();\n//   const elements = useElements();\n\n//   const [selectedPaymentMethod, setSelectedPaymentMethod] =\n//     useState(\"Credit Card\");\n\n//   const handlePaymentMethodChange = (e) => {\n//     setSelectedPaymentMethod(e.target.value);\n//   };\n\n// //   const handleSubmit = async (e) => {\n// //     e.preventDefault();\n\n// //     if (!stripe || !elements) {\n// //       return;\n// //     }\n\n// //     // For a credit card payment\n// //     if (selectedPaymentMethod === \"Credit Card\") {\n// //       const cardElement = elements.getElement(CardElement);\n// //       const { token, error } = await stripe.createToken(cardElement);\n\n// //       if (error) {\n// //         console.error(\"Payment error:\", error);\n// //         alert(\"Payment failed: \" + error.message);\n// //       } else {\n// //         console.log(\"Received Stripe token:\", token);\n// //         try {\n// //           const response = await fetch(\n// //             \"http://localhost:3001/api/payment-intent\",\n// //             {\n// //               method: \"POST\",\n// //               headers: {\n// //                 \"Content-Type\": \"application/json\",\n// //               },\n// //               body: JSON.stringify({ token: token.id }),\n// //             }\n// //           );\n\n// //           const result = await response.json();\n\n// //           if (response.ok) {\n// //             alert(\"Payment successful!\");\n// //             navigate(\"/payment-success\");\n// //           } else {\n// //             console.error(\"Payment error:\", result.error);\n// //             alert(\"Payment failed: \" + result.error);\n// //           }\n// //         } catch (err) {\n// //           console.error(\"Error processing payment:\", err);\n// //           alert(\"Payment failed.\");\n// //         }\n// //       }\n// //     }\n// //   };\n\n    \n//     const handleSubmit = async (e) => {\n//       e.preventDefault();\n\n//       if (!stripe || !elements) {\n//         return;\n//       }\n\n//       // For a credit card payment\n//       if (selectedPaymentMethod === \"Credit Card\") {\n//         const cardElement = elements.getElement(CardElement);\n//         const { token, error } = await stripe.createToken(cardElement);\n\n//         if (error) {\n//           console.error(\"Payment error:\", error);\n//           alert(\"Payment failed: \" + error.message);\n//         } else {\n//           console.log(\"Received Stripe token:\", token);\n//           try {\n//             const response = await fetch(\n//               \"http://localhost:3001/api/payment-intent\",\n//               {\n//                 method: \"POST\",\n//                 headers: {\n//                   \"Content-Type\": \"application/json\",\n//                 },\n//                 body: JSON.stringify({ token: token.id }), // Sending the token ID\n//               }\n//             );\n\n//             const result = await response.json();\n\n//             if (response.ok) {\n//               alert(\"Payment successful!\");\n//               navigate(\"/payment-success\");\n//             } else {\n//               console.error(\"Payment error:\", result.error);\n//               alert(\"Payment failed: \" + result.error);\n//             }\n//           } catch (err) {\n//             console.error(\"Error processing payment:\", err);\n//             alert(\"Payment failed.\");\n//           }\n//         }\n//       }\n//     };\n\n//   return (\n//     <div className=\"checkout-container\">\n//       <h2>Checkout</h2>\n//       <form onSubmit={handleSubmit} className=\"checkout-form\">\n//         <div className=\"payment-method\">\n//           <label>\n//             <input\n//               type=\"radio\"\n//               value=\"Credit Card\"\n//               checked={selectedPaymentMethod === \"Credit Card\"}\n//               onChange={handlePaymentMethodChange}\n//             />\n//             Credit Card\n//           </label>\n//         </div>\n\n//         {selectedPaymentMethod === \"Credit Card\" && (\n//           <div className=\"credit-card-details\">\n//             <div className=\"input-group\">\n//               <label>Cardholder Name:</label>\n//               <input\n//                 type=\"text\"\n//                 value={cardholderName}\n//                 onChange={(e) => setCardholderName(e.target.value)}\n//                 required\n//                 placeholder=\"Enter cardholder's name\"\n//               />\n//             </div>\n\n//             <div className=\"input-group\">\n//               <label>Email:</label>\n//               <input\n//                 type=\"email\"\n//                 value={email}\n//                 onChange={(e) => setEmail(e.target.value)}\n//                 required\n//                 placeholder=\"Enter your email\"\n//               />\n//             </div>\n\n//             <div className=\"input-group\">\n//               <label>Card Details:</label>\n//               <CardElement />\n//             </div>\n//           </div>\n//         )}\n\n//         <div className=\"submit-button\">\n//           <button type=\"submit\" disabled={!stripe}>\n//             Pay Now\n//           </button>\n//         </div>\n//       </form>\n//     </div>\n//   );\n// };\n\n// const CheckoutWrapper = () => (\n//   <Elements stripe={stripePromise}>\n//     <Checkout />\n//   </Elements>\n// );\n\n// export default CheckoutWrapper;\n\n\n\nimport React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  Elements,\n  useStripe,\n  useElements,\n  CardElement,\n} from \"@stripe/react-stripe-js\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport \"./Checkout.css\";\n\n// Initialize Stripe with your public key\nconst stripePromise = loadStripe(\n  \"pk_test_51NdsQCEBmpPY3F1SVvoq27xazI7MPxe38i9q9otPfxTR61SRhYaUZHvDjxnvWl8VuriA1QFiQVkqKGitEzYcR2Ha00yiiOOlzY\"\n);\n\nconst Checkout = () => {\n  const navigate = useNavigate();\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const [selectedPaymentMethod, setSelectedPaymentMethod] =\n    useState(\"Credit Card\");\n  const [cardholderName, setCardholderName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n\n  const handlePaymentMethodChange = (e) => {\n    setSelectedPaymentMethod(e.target.value);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    // For a credit card payment\n    if (selectedPaymentMethod === \"Credit Card\") {\n      const cardElement = elements.getElement(CardElement);\n      const { token, error } = await stripe.createToken(cardElement);\n\n      if (error) {\n        console.error(\"Payment error:\", error);\n        alert(\"Payment failed: \" + error.message);\n      } else {\n        console.log(\"Received Stripe token:\", token);\n        try {\n          const response = await fetch(\n            \"http://localhost:3001/api/payment-intent\",\n            {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n              },\n              body: JSON.stringify({\n                token: token.id,\n                cardholderName,\n                email,\n              }),\n            }\n          );\n\n          const result = await response.json();\n\n          if (response.ok) {\n            alert(\"Payment successful!\");\n            navigate(\"/payment-success\");\n          } else {\n            console.error(\"Payment error:\", result.error);\n            alert(\"Payment failed: \" + result.error);\n          }\n        } catch (err) {\n          console.error(\"Error processing payment:\", err);\n          alert(\"Payment failed.\");\n        }\n      }\n    }\n  };\n\n  return (\n    <div className=\"checkout-container\">\n      <h2>Checkout</h2>\n      <form onSubmit={handleSubmit} className=\"checkout-form\">\n        <div className=\"payment-method\">\n          <label>\n            <input\n              type=\"radio\"\n              value=\"Credit Card\"\n              checked={selectedPaymentMethod === \"Credit Card\"}\n              onChange={handlePaymentMethodChange}\n            />\n            Credit Card\n          </label>\n        </div>\n\n        {selectedPaymentMethod === \"Credit Card\" && (\n          <div className=\"credit-card-details\">\n            <div className=\"input-group\">\n              <label>Cardholder Name:</label>\n              <input\n                type=\"text\"\n                value={cardholderName}\n                onChange={(e) => setCardholderName(e.target.value)}\n                required\n                placeholder=\"Enter cardholder's name\"\n              />\n            </div>\n\n            <div className=\"input-group\">\n              <label>Email:</label>\n              <input\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n                placeholder=\"Enter your email\"\n              />\n            </div>\n\n            <div className=\"input-group\">\n              <label>Card Details:</label>\n              <CardElement />\n            </div>\n          </div>\n        )}\n\n        <div className=\"submit-button\">\n          <button type=\"submit\" disabled={!stripe}>\n            Pay Now\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nconst CheckoutWrapper = () => (\n  <Elements stripe={stripePromise}>\n    <Checkout />\n  </Elements>\n);\n\nexport default CheckoutWrapper;\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SACEC,QAAQ,EACRC,SAAS,EACTC,WAAW,EACXC,WAAW,QACN,yBAAyB;AAChC,SAASC,UAAU,QAAQ,mBAAmB;AAC9C,OAAO,gBAAgB;;AAEvB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}